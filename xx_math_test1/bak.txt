#include "xx_math.h"
#include "xx_ptr.h"
#include "xx_string.h"

struct XY {
	int x, y;
};
struct Foo {
	XY xy;

	xx::Grid2d<Foo*>* g;
	int idx;

	void SetXY(XY const& xy_) {
		xy = xy_;
		g->Update(idx, xy_.x, xy_.y);
	}

	~Foo() {
		g->Remove(idx);
	}
};

int main() {
	xx::Grid2d<Foo*> g(5000, 5000);
	std::vector<xx::Shared<Foo>> foos;

	auto NewFoo = [&](int x, int y) {
		auto&& f = foos.emplace_back().Emplace();
		f->xy = { x, y };
		f->g = &g;
		f->idx = g.Add(f->xy.x, f->xy.y, &*f);
	};
	NewFoo(1, 1);
	NewFoo(4, 4);
	NewFoo(2, 2);
	NewFoo(3, 3);
	for (size_t i = 0; i < 100; i++) {
		NewFoo(1, 1);
	}

	xx::CoutN("foos.size() = ", foos.size());
	xx::CoutN("g.Count() = ", g.Count());

	foos[1]->SetXY({ 1, 1 });

	for (size_t j = 0; j < 10; j++) {
		auto secs = xx::NowEpochSeconds();
		int n;
		for (size_t i = 0; i < 10000000; i++) {
			n = 0;
			g.AnyNeighbor(1, 1, [&](Foo* const& p) {
				++n;
			});
		}
		xx::CoutN("n = ", n);
		xx::CoutN("secs = ", xx::NowEpochSeconds()-secs);
	}


	for (auto& f : foos) {
		xx::CoutN("f->idx = ", f->idx);
	}
	foos.clear();

	xx::CoutN("foos.size() = ", foos.size());
	xx::CoutN("g.Count() = ", g.Count());

	// todo: 模拟一批 foo 更新坐标
	// 令 foos 均匀分布在 grid. 执行范围检索。

	// todo2: 用半径查询，但是格子向外矩形扩散。不需要填充，只需要逐个枚举。
	// 对于一定处于半径范围内的格子里面的所有对象，可跳过距离判断

	// todo: 填充静态圆形逐步扩散格子, 里面存储 格子xy相对下标
	// 支持距离映射：用半径查 扩散范围. 
	// 假设: 100 米半径，填充了 5000 个扩散格子，则 10 米半径 可能只需要扫前 100 个

	return 0;
}



































// 测试结论：查表比现算快几倍( safe mode ) 到 几十倍

#include "xx_string.h"
//#ifdef _WIN32
//#include <mimalloc-new-delete.h>
//#endif
#include "xx_math.h"

// 计算直线的弧度
template<typename Point1, typename Point2>
float GetAngle(Point1 const& from, Point2 const& to) noexcept {
	if (from.x == to.x && from.y == to.y) return 0.0f;
	auto&& len_y = to.y - from.y;
	auto&& len_x = to.x - from.x;
	return atan2f(len_y, len_x);
}

// 计算距离
template<typename Point1, typename Point2>
float GetDistance(Point1 const& a, Point2 const& b) noexcept {
	float dx = a.x - b.x;
	float dy = a.y - b.y;
	return sqrtf(dx * dx + dy * dy);
}

// 点围绕 0,0 为中心旋转 a 弧度   ( 角度 * (float(M_PI) / 180.0f) )
template<typename Point>
inline Point Rotate(Point const& pos, float const& a) noexcept {
	auto&& sinA = sinf(a);
	auto&& cosA = cosf(a);
	return Point{ pos.x * cosA - pos.y * sinA, pos.x * sinA + pos.y * cosA };
}



struct XY {
	int x, y;
};

int main() {
	{
		auto secs = xx::NowEpochSeconds();
		double count = 0;
		for (int k = 0; k < 50; ++k) {
			for (int y = -1024; y < 1024; ++y) {
				for (int x = -1024; x < 1024; ++x) {
					count += atan2f((float)y, (float)x);
				}
			}
		}
		xx::CoutN(count);
		xx::CoutN(xx::NowEpochSeconds() - secs);
	}

	auto secs = xx::NowEpochSeconds();
	int64_t count = 0;
	for (int k = 0; k < 50; ++k) {
		for (int y = -1024; y < 1024; ++y) {
			for (int x = -1024; x < 1024; ++x) {
				//count += table_angle[(y + 1024) * 2048 + x + 1024];
				count += xx::GetAngleXY<true>(x, y);
			}
		}
	}
	xx::CoutN(count);
	xx::CoutN(xx::NowEpochSeconds() - secs);

	//for(auto& o : table_sin) {
	//    xx::Cout(o, " ");
	//}
	//xx::CoutN();
	//for(auto& o : table_cos) {
	//    xx::Cout(o, " ");
	//}
	//xx::CoutN();
	return 0;
}
