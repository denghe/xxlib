1. 原始需求

	提供网站下载 loader.exe (可能不叫这个名字), 双击后 等待下载，开始游戏
	
2. 功能列表

	访问官网，资源下载，本地运行环境创建，更新检查，运行前基础文件完整性校验，进入游戏
	todo：自动发现上次运行的崩溃日志 上传到我们服务器

3. 具体流程

	双击启动, 一开始没有任何 UI 显示，就像 chrome 浏览器安装文件那样的风格。
	根据事件需求，显示进度条 UI（有任何下载需求产生时）( 双进度条带百分比 + 当前文件名 + 下载速度 字节/秒 )
	
	检查环境，判断自身应采取何种行为。想办法避免多开（跨进程 mutex 走起）
	
	现状：当前 cocos 的 win32 版本，对 含有中文的目录 不支持（ win7 下测试崩溃 ）, 尚不确定具体是哪个组件不支持，不太好修复。
	故决定先将安装目录设定到 ProgramData 下面。
	
	访问内置域名 URL, 从 索引服务 下载 files_idx.json，解析填充到文件列表备用

	检查 ProgramData\xxx_game_loader 目录是否存在，没有就创建。
	
	查找 ProgramData\xxx_game_loader 下 是否存在 啥啥.exe（可能位于子目录 ) 并记录

	遍历 文件列表, 检查所有文件的 len & md5. 检查失败的，安排下载，直到检查通过

	启动 啥啥.exe, 当前进程退出

	异常：如果网络故障，显示 UI 并报错( 显示 OK 版错误 message box，点击 OK 关闭退出 ）
	
4. 其他

	由功能性调整产生的残留文件，会造成哪些影响？是否应该移除？如何移除？
	已知的，由于 search path 机制的存在，资源加载可能优先加载到残留文件从而造成运行时错误。
	如果要做移除，则需要有 完整的 文件列表（不只是下载的东西，还包括运行时产生的文件等），遍历目录，不在这个列表里面的就干掉？


5. 相关工具

	files_idx_maker: 扫描 指定目录，从指定 URL 下载文件并校验，生成 files_idx.json
	
	工具用法：

		指定三个参数。 1: 目标目录       2: 资源URL      3: 下载并校验内容( verify )

	目录内容来自 win32 release 编译的 exe + dll + 各种资源目录


	目录结构方面，可以维护一个 带版本管理的 大而全 目录，并行建立多个 同级目录，应对  win32 最小下载 和 apk 打包 需求

	进一步的，目录可以按 游戏 或 板块 或 模块 分开， 例如 exe 开始执行后， login + lobby 部分，需求哪些文件，就单独复制到一个目录，保持和 大而全 相同目录结构 & 层次，最后用工具扫描得到 json

	理论上讲，游戏每一步 执行之前，都应该有 文件完整性检查&下载 的步骤，以确保功能无碍：

		exe 执行后，确保 入口lua 没问题。
		入口lua 确保 login 没问题。
		login 确保 lobby 没问题。
		lobby 根据 玩家点击的图标，确保 即将进入的 game 没问题。

	上述环节，每一步应该都需求该工具产生的 json。

	这些 json 可即时的从 网关 内部的 json下载服务（或者叫文件索引版本管理服务？） 拉取 以保证下载效率。 exe 以及 入口 lua 这部分 的 json 可走 暴露在公网的 类似服务 ( http 协议 )

	大而全 目录，为确保 CDN 命中率，采取 不覆盖，只追加 的形式，可无脑同步到 s3桶 啥的。

	game 有升级，最方便的办法，是整个目录换用，旧文件拷过来。这要求 game 加载时，需要按照 lobby 的指示，定位到正确的目录名，
	同时，也可能烙下很多 垃圾，需要思考 如何处理旧目录，理论上讲可以直接将旧目录改名， 并 使用下载器检查文件 并升级 这样最快最省。如何 定位 并 找出 旧目录，需要提前规划，制定固定前缀，便于找寻，避免误伤。



	外网 files_idx.json 下载服务：可自写，也可自架 nginx 之类，每次更新文件之后 重启下服务 确保输出没有被 cache.
	内网 可依附在 lobby 等服务上，用 包 来收发。
