
/*
using namespace std::chrono_literals;


#pragma once
#include <thread>
#include <regex>
#include <asio.hpp>
#include "asio/ssl.hpp"
#include "log.hpp"
#include "common/http_utility.hpp"
#include "config.hpp"

using asio::ip::tcp;
using asio::awaitable;
using asio::co_spawn;
using asio::detached;
using asio::use_awaitable;
using head_size_t = uint16_t;
namespace this_coro = asio::this_coro;

class worker :std::enable_shared_from_this<worker>
{
    using asio_work_t = asio::executor_work_guard<asio::io_context::executor_type>;
public:
    worker()
        :ioctx_(1)
        , work_(asio::make_work_guard(ioctx_))
    {
    }

    ~worker()
    {
        stop();
    }

    void run()
    {
        thread_ = std::thread([this]() {
            ioctx_.run();
            });
    }

    void stop()
    {
        ioctx_.stop();
        if (thread_.joinable())
            thread_.join();
    }

    asio::io_context& io_context()
    {
        return ioctx_;
    }
private:
    asio::io_context ioctx_;
    asio_work_t work_;
    std::thread thread_;
};

struct session_pair :public std::enable_shared_from_this<session_pair>
{
    tcp::socket source;
    asio::ssl::stream<tcp::socket> destination;
    std::shared_ptr<worker> parent;

    session_pair(std::shared_ptr<worker> w, tcp::socket sock, asio::ssl::context& ctx)
        :source(std::move(sock))
        , destination(w->io_context(), ctx)
        , parent(std::move(w))
    {
        //destination.set_verify_mode(asio::ssl::verify_peer);
    }

    void close()
    {
        if (source.is_open())
        {
            asio::error_code ignore_ec;
            source.shutdown(asio::ip::tcp::socket::shutdown_both, ignore_ec);
            source.close(ignore_ec);
        }

        if (destination.lowest_layer().is_open())
        {
            asio::error_code ignore_ec;
            destination.lowest_layer().shutdown(asio::ip::tcp::socket::shutdown_both, ignore_ec);
            destination.lowest_layer().close(ignore_ec);
        }
    }

    static void parse_url(std::string_view url, std::string_view& scheme, std::string_view& host, uint16_t& port, std::string_view& path)
    {
        auto pos = url.find(':');
        scheme = url.substr(0, pos);
        url = url.substr(pos + 3);
        pos = url.find('/');
        std::string_view host_port = url.substr(0, pos);
        path = url.substr(pos);
        host = host_port;
        port = (scheme == "http" ? 80 : 443);
        pos = host_port.find(':');
        if (pos != std::string_view::npos)
        {
            host = host_port.substr(0, pos);
            auto s = host_port.substr(pos + 1);
            std::from_chars(s.data(), s.data() + s.size(), port, 10);
        }
    }

    template<typename SocketType>
    static std::string address(const SocketType& socket)
    {
        std::string address;
        asio::error_code code;
        auto endpoint = socket.remote_endpoint(code);
        if (!code)
        {
            address.append(endpoint.address().to_string());
            address.append(":");
            address.append(std::to_string(endpoint.port()));
        }
        return address;
    }

    static std::shared_ptr<asio::steady_timer> make_timer(std::shared_ptr<session_pair> self, std::chrono::seconds timeout)
    {
        std::shared_ptr<asio::steady_timer> timer = std::make_shared<asio::steady_timer>(self->parent->io_context());
        timer->expires_after(timeout);
        timer->async_wait([self = std::move(self)](const asio::error_code& e) {
            if (e)
            {
                return;
            }

            if (self->source.is_open())
            {
                LOG_INFO("kick conection %s : timeout", address(self->source).data());
                self->source.close();
            }
        });
        return timer;
    }

    awaitable<bool> handshake()
    {
        asio::streambuf streambuf;
        size_t n = co_await asio::async_read_until(source, streambuf, "\r\n", use_awaitable);
        if (0 == n)
            co_return false;

        auto line = std::string_view{ (const char*)streambuf.data().data(), n };
        size_t method_end;
        if ((method_end = line.find(' ')) == std::string_view::npos)
        {
            co_return false;
        }

        auto method = line.substr(0, method_end);
        size_t query_start = std::string_view::npos;
        size_t path_and_query_string_end = std::string_view::npos;
        for (size_t i = method_end + 1; i < line.size(); ++i)
        {
            if (line[i] == '?' && (i + 1) < line.size())
            {
                query_start = i + 1;
            }
            else if (line[i] == ' ')
            {
                path_and_query_string_end = i;
                break;
            }
        }

        std::string_view scheme;
        std::string_view host;
        uint16_t port;
        std::string_view path;
        parse_url(line.substr(method_end + 1, path_and_query_string_end - method_end - 1), scheme, host, port, path);

        asio::ip::tcp::resolver resolver(parent->io_context());
        if (!proxy_config::get().proxy_host.empty())
        {
            auto endpoints = co_await resolver.async_resolve(proxy_config::get().proxy_host, std::to_string(proxy_config::get().proxy_port), use_awaitable);
            co_await asio::async_connect(destination.lowest_layer(), endpoints, use_awaitable);

            std::string host_port_string;
            host_port_string.append(host);
            host_port_string.append(":");
            host_port_string.append(std::to_string(port));

            std::string data;
            data.append("CONNECT ");
            data.append(host_port_string);
            data.append(" HTTP/1.1\r\n");
            data.append("Host: ");
            data.append(host_port_string);
            data.append("\r\n\r\n");

            co_await asio::async_write(destination.next_layer(), asio::buffer(data.data(), data.size()), use_awaitable);

            asio::streambuf readbuf;
            co_await asio::async_read_until(destination.next_layer(), readbuf, "\r\n\r\n", use_awaitable);
            if (0 == n)
                co_return false;

            LOG_INFO("recv proxy response: %s", std::string{ (const char*)readbuf.data().data(), readbuf.size() }.data());
        }
        else
        {
            auto endpoints = co_await resolver.async_resolve(host, std::to_string(port), use_awaitable);
            co_await asio::async_connect(destination.lowest_layer(), endpoints, use_awaitable);
        }

        SSL_set_tlsext_host_name(destination.native_handle(), std::string{host}.data());
        co_await destination.async_handshake(asio::ssl::stream_base::client, use_awaitable);

        if (proxy_config::get().proxy_host.empty())
        {
            std::string str;
            str.append(method);
            str.append(1, ' ');
            str.append(path);
            str.append(1, ' ');
            str.append(line.substr(path_and_query_string_end + 1));
            size_t num_additional_bytes = streambuf.size() - n;
            streambuf.consume(n);
            str.append((const char*)streambuf.data().data(), num_additional_bytes);
            co_await asio::async_write(destination, asio::buffer(str.data(), str.size()), use_awaitable);
        }
        else
        {
            co_await asio::async_write(destination, streambuf, use_awaitable);
        }
        co_return true;
    }

    static awaitable<void> start(std::shared_ptr<session_pair> self)
    {
        try
        {
            auto timer = make_timer(self, std::chrono::seconds(10));
            bool ok = co_await self->handshake();
            MOON_CHECK(ok, "handshake");
            timer->cancel();
            co_spawn(self->parent->io_context(),
                [self = self]() mutable
                {
                    return handle_souce_message(std::move(self));
                }, detached);

            co_spawn(self->parent->io_context(),
                [self = self]() mutable
                {
                    return handle_destination_message(std::move(self));
                }, detached);
            co_return;
        }
        catch (std::exception& e)
        {
            LOG_INFO("close conection handshake %s: %s", address(self->source).data(), e.what());
            self->close();
        }
    }

    static awaitable<void> handle_souce_message(std::shared_ptr<session_pair> self)
    {
        try
        {
            std::array<char, 4096> data;
            for (;;)
            {
                std::size_t n = co_await self->source.async_read_some(asio::buffer(data), use_awaitable);
                if (n == 0)
                {
                    self->destination.lowest_layer().shutdown(tcp::socket::shutdown_send);
                    break;
                }
                co_await async_write(self->destination, asio::buffer(data, n), use_awaitable);
            }
        }
        catch (std::exception& e)
        {
            if (self->destination.lowest_layer().is_open())
            {
                LOG_INFO("source %s -> destination %s exception: %s", address(self->source.lowest_layer()).data(), address(self->destination.lowest_layer()).data(), e.what());
            }
            self->close();
        }
    }

    static awaitable<void> handle_destination_message(std::shared_ptr<session_pair> self)
    {
        try
        {
            std::array<char, 4096> data;
            for (;;)
            {
                std::size_t n = co_await self->destination.async_read_some(asio::buffer(data), use_awaitable);
                if (n == 0)
                {
                    self->source.shutdown(tcp::socket::shutdown_send);
                    break;
                }
                co_await async_write(self->source, asio::buffer(data, n), use_awaitable);
            }
        }
        catch (std::exception& e)
        {
            if (self->source.is_open())
            {
                LOG_INFO("destination %s -> source %s exception: %s", address(self->destination.lowest_layer()).data(), address(self->source.lowest_layer()).data(), e.what());
            }
            self->close();
        }
    }

};

class server :public std::enable_shared_from_this<server>
{
public:
    server()
        :ssl_ctx_(asio::ssl::context::tls_client)
    {
        ssl_ctx_.set_options(asio::ssl::context::no_tlsv1);
        ssl_ctx_.set_options(asio::ssl::context::no_tlsv1_1);

        if (proxy_config::get().certification_file.size() > 0 && proxy_config::get().private_key_file.size() > 0) {
            ssl_ctx_.use_certificate_chain_file(proxy_config::get().certification_file);
            ssl_ctx_.use_private_key_file(proxy_config::get().private_key_file, asio::ssl::context::pem);
        }

        ssl_ctx_.set_verify_mode(asio::ssl::verify_none);
    }

    void run(int threadnum, uint16_t port)
    {
        //ssl_ctx_.load_verify_file("ca.pem");
        for (int i = 0; i < threadnum; ++i)
        {
            auto& w = workers_.emplace_back(std::make_shared<worker>());
            w->run();
        }

        co_spawn(context_, listener(shared_from_this(), port), detached);

        asio::signal_set signals(context_, SIGINT, SIGTERM);
        signals.async_wait([&](auto, auto) { context_.stop(); });

        context_.run();

        for (auto& w : workers_)
        {
            w->stop();
        }
    }
private:
    static awaitable<void> listener(std::shared_ptr<server> self, uint16_t port)
    {
#if TARGET_PLATFORM == PLATFORM_WINDOWS
        tcp::acceptor acceptor(self->context_, { tcp::v4(), port }, false);
#else
        tcp::acceptor acceptor(self->context_, { tcp::v4(), port }, true);
#endif
        uint32_t balance = 0;
        size_t size = self->workers_.size();
        for (;;)
        {
            try
            {
                auto w = self->workers_[balance % size];
                tcp::socket socket(w->io_context());
                co_await acceptor.async_accept(socket, use_awaitable);
                co_spawn(w->io_context(),
                    [self, w, socket = std::move(socket)]() mutable
                {
                    return session_pair::start(std::make_shared<session_pair>(std::move(w), std::move(socket), self->ssl_ctx_));
                }, detached);
                ++balance;
            }
            catch (std::exception& ex)
            {
                LOG_INFO("server accept error %s", ex.what());
            }
        }
    }

    asio::io_context context_;
    asio::ssl::context ssl_ctx_;
    std::vector<std::shared_ptr<worker>> workers_;
};


https://developpaper.com/quick-understanding-boost-asio-multithreading-model-based-on/






*/














/*
//
// refactored_echo_server.cpp
// ~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Copyright (c) 2003-2021 Christopher M. Kohlhoff (chris at kohlhoff dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#include <asio/co_spawn.hpp>
#include <asio/detached.hpp>
#include <asio/io_context.hpp>
#include <asio/ip/tcp.hpp>
#include <asio/signal_set.hpp>
#include <asio/write.hpp>
#include <cstdio>

using asio::ip::tcp;
using asio::awaitable;
using asio::co_spawn;
using asio::detached;
using asio::use_awaitable;
namespace this_coro = asio::this_coro;

using namespace std::chrono_literals;

awaitable<void> echo_once(tcp::socket& socket)
{
    char data[128];
    asio::steady_timer timer(socket.get_executor(), std::chrono::steady_clock::now() + 5s);
    timer.async_wait([&](auto e) { if (!e) socket.close(e); });
    std::size_t n = co_await socket.async_read_some(asio::buffer(data), use_awaitable);
    timer.cancel();
    co_await async_write(socket, asio::buffer(data, n), use_awaitable);
}

awaitable<void> echo(tcp::socket socket)
{
    try
    {
        for (;;)
        {
            // The asynchronous operations to echo a single chunk of data have been
            // refactored into a separate function. When this function is called, the
            // operations are still performed in the context of the current
            // coroutine, and the behaviour is functionally equivalent.
            co_await echo_once(socket);
        }
    }
    catch (std::exception& e)
    {
        std::printf("echo Exception: %s\n", e.what());
    }
}

awaitable<void> listener()
{
    auto executor = co_await this_coro::executor;
    tcp::acceptor acceptor(executor, { tcp::v4(), 55555 });
    for (;;)
    {
        tcp::socket socket = co_await acceptor.async_accept(use_awaitable);
        co_spawn(executor, echo(std::move(socket)), detached);
    }
}

int main()
{

    try
    {
        asio::io_context io_context(10000);

        asio::signal_set signals(io_context, SIGINT, SIGTERM);
        signals.async_wait([&](auto, auto) { io_context.stop(); });

        co_spawn(io_context, listener(), detached);

        io_context.run();
    }
    catch (std::exception& e)
    {
        std::printf("Exception: %s\n", e.what());
    }
}















//
// chat_server.cpp
// ~~~~~~~~~~~~~~~
//
// Copyright (c) 2003-2021 Christopher M. Kohlhoff (chris at kohlhoff dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#include <cstdlib>
#include <deque>
#include <iostream>
#include <list>
#include <memory>
#include <set>
#include <string>
#include <utility>
#include <asio/awaitable.hpp>
#include <asio/detached.hpp>
#include <asio/co_spawn.hpp>
#include <asio/io_context.hpp>
#include <asio/ip/tcp.hpp>
#include <asio/read_until.hpp>
#include <asio/redirect_error.hpp>
#include <asio/signal_set.hpp>
#include <asio/steady_timer.hpp>
#include <asio/use_awaitable.hpp>
#include <asio/write.hpp>

using asio::ip::tcp;
using asio::awaitable;
using asio::co_spawn;
using asio::detached;
using asio::redirect_error;
using asio::use_awaitable;

//----------------------------------------------------------------------

class chat_participant
{
public:
    virtual ~chat_participant() {}
    virtual void deliver(const std::string& msg) = 0;
};

typedef std::shared_ptr<chat_participant> chat_participant_ptr;

//----------------------------------------------------------------------

class chat_room
{
public:
    void join(chat_participant_ptr participant)
    {
        participants_.insert(participant);
        for (auto msg : recent_msgs_)
            participant->deliver(msg);
    }

    void leave(chat_participant_ptr participant)
    {
        participants_.erase(participant);
    }

    void deliver(const std::string& msg)
    {
        recent_msgs_.push_back(msg);
        while (recent_msgs_.size() > max_recent_msgs)
            recent_msgs_.pop_front();

        for (auto participant : participants_)
            participant->deliver(msg);
    }

private:
    std::set<chat_participant_ptr> participants_;
    enum { max_recent_msgs = 100 };
    std::deque<std::string> recent_msgs_;
};

//----------------------------------------------------------------------

class chat_session
    : public chat_participant,
    public std::enable_shared_from_this<chat_session>
{
public:
    chat_session(tcp::socket socket, chat_room& room)
        : socket_(std::move(socket)),
        timer_(socket_.get_executor()),
        room_(room)
    {
        timer_.expires_at(std::chrono::steady_clock::time_point::max());
    }

    void start()
    {
        room_.join(shared_from_this());

        co_spawn(socket_.get_executor(),
            [self = shared_from_this()]{ return self->reader(); },
            detached);

        co_spawn(socket_.get_executor(),
            [self = shared_from_this()]{ return self->writer(); },
            detached);
    }

    void deliver(const std::string& msg)
    {
        write_msgs_.push_back(msg);
        timer_.cancel_one();
    }

private:
    awaitable<void> reader()
    {
        try
        {
            for (std::string read_msg;;)
            {
                std::size_t n = co_await asio::async_read_until(socket_,
                    asio::dynamic_buffer(read_msg, 1024), "\n", use_awaitable);

                room_.deliver(read_msg.substr(0, n));
                read_msg.erase(0, n);
            }
        }
        catch (std::exception&)
        {
            stop();
        }
    }

    awaitable<void> writer()
    {
        try
        {
            while (socket_.is_open())
            {
                if (write_msgs_.empty())
                {
                    asio::error_code ec;
                    co_await timer_.async_wait(redirect_error(use_awaitable, ec));
                }
                else
                {
                    co_await asio::async_write(socket_,
                        asio::buffer(write_msgs_.front()), use_awaitable);
                    write_msgs_.pop_front();
                }
            }
        }
        catch (std::exception&)
        {
            stop();
        }
    }

    void stop()
    {
        room_.leave(shared_from_this());
        socket_.close();
        timer_.cancel();
    }

    tcp::socket socket_;
    asio::steady_timer timer_;
    chat_room& room_;
    std::deque<std::string> write_msgs_;
};

//----------------------------------------------------------------------

awaitable<void> listener(tcp::acceptor acceptor)
{
    chat_room room;

    for (;;)
    {
        std::make_shared<chat_session>(
            co_await acceptor.async_accept(use_awaitable),
            room
            )->start();
    }
}

//----------------------------------------------------------------------

int main(int argc, char* argv[])
{
    try
    {
        if (argc < 2)
        {
            std::cerr << "Usage: chat_server <port> [<port> ...]\n";
            return 1;
        }

        asio::io_context io_context(1);

        for (int i = 1; i < argc; ++i)
        {
            unsigned short port = std::atoi(argv[i]);
            co_spawn(io_context,
                listener(tcp::acceptor(io_context, { tcp::v4(), port })),
                detached);
        }

        asio::signal_set signals(io_context, SIGINT, SIGTERM);
        signals.async_wait([&](auto, auto) { io_context.stop(); });

        io_context.run();
    }
    catch (std::exception& e)
    {
        std::cerr << "Exception: " << e.what() << "\n";
    }

    return 0;
}


















//class ThreadPool {
//public:
//    explicit ThreadPool(std::size_t size)
//        : work_guard_(asio::make_work_guard(io_context_)) {
//        workers_.reserve(size);
//        for (std::size_t i = 0; i < size; ++i) {
//            workers_.emplace_back(&asio::io_context::run, &io_context_);
//        }
//    }
//
//    ~ThreadPool() {
//        io_context_.stop();
//        for (auto& w : workers_) {
//            w.join();
//        }
//    }
//
//    template<class F>
//    void Enqueue(F f) {
//        asio::post(io_context_, f);
//    }
//
//private:
//    std::vector<std::thread> workers_;
//    asio::io_context io_context_;
//    asio::executor_work_guard<asio::io_context::executor_type> work_guard_; // keep ioc.run
//};




































template<class F> auto MakeScopeGuard(F&& f) noexcept {
    struct ScopeGuard {
        F f;
        bool cancel;
        explicit ScopeGuard(F&& f) noexcept : f(std::move(f)), cancel(false) {}
        ~ScopeGuard() noexcept { if (!cancel) { f(); } }
        void Cancel() noexcept { cancel = true; }
        void operator()(bool cancel = false) { f(); this->cancel = cancel; }
    };
    return ScopeGuard(std::forward<F>(f));
}




    //asio::steady_timer timer(socket.get_executor(), std::chrono::steady_clock::now() + 5s);
    //timer.async_wait([&](auto e) { if (!e) socket.close(e); });
    std::size_t n = co_await socket.async_read_some(asio::buffer(data), asio::use_awaitable);
    //timer.cancel();



    		//asio::steady_timer timer(ioc);
		//timer.expires_after(100ms);
		//co_await timer.async_wait(asio::use_awaitable);


*/
